HOW TO FIX GIT AUTHOR MISMATCH AFTER COMMIT AND PUSH

# Backup Your Branch
git branch backup-before-rewrite

# Set Correct Git Config
git config user.name "Your Correct Name"
git config user.email "your.correct@email.com"

# Rewrite Commit History Using git filter-branch
git filter-branch --env-filter '
OLD_EMAIL="WRONG_EMAIL"
NEW_NAME="CORRECT_NAME"
NEW_EMAIL="CORRECT_EMAIL"

if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]; then
    export GIT_COMMITTER_NAME="$NEW_NAME"
    export GIT_COMMITTER_EMAIL="$NEW_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]; then
    export GIT_AUTHOR_NAME="$NEW_NAME"
    export GIT_AUTHOR_EMAIL="$NEW_EMAIL"
fi
' --tag-name-filter cat -- --all

# Verify the Changes
git log --pretty=format:"%h %an <%ae> %cn <%ce>"

# Force Push to Remote
git push --force --tags origin HEAD


# If you have few commits, then you'd want an interactive rebase
# e.g. last 5 commits
git rebase -i HEAD~5

# For each commit you want to edit, replace pick with edit in the rebase file.

# For each marked commit, amend the author and continue:
git commit --amend --author="CORRECT_NAME <CORRECT_EMAIL>" --no-edit
git rebase --continue

# Force push after rebasing:
git push --force

# If you're working in a team, kindly inform them of the changes you're making so that they can rebase their work as well.

# for a more modern approach, use the following
git filter-repo --email-callback 'return email.replace(b"wrong@email.com", b"correct@email.com")' --name-callback 'return name.replace(b"Wrong Name", b"Correct Name")'


# this is the method suggested by git when you use git-filter-branch command
